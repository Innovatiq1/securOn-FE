import { Component, OnInit } from '@angular/core';
import moment from 'moment';
import { NgApexchartsModule } from 'ng-apexcharts';
import { Subscription } from 'rxjs';
import { MaterialModule } from 'src/app/material.module';
import { ChartOptions } from 'src/app/pages/charts/area/area.component';
import { VulnerabilityDataService } from 'src/app/services/api/shared.service';
import { VulnerabilitiesService } from 'src/app/services/api/vulnerabilities.service';
@Component({
  selector: 'app-vulnerability-by-cvss-score',
  standalone: true,
  imports: [MaterialModule, NgApexchartsModule],
  templateUrl: './vulnerability-by-cvss-score.component.html',
})
export class VulnerabilityByCvssScoreComponent implements OnInit {
  public scoreChart: Partial<ChartOptions> | any;
  public responseLengths: number[] = [];
  private subscriptions: Subscription = new Subscription();
  constructor(private vulnerabilitiesService: VulnerabilitiesService,private localStorageService: VulnerabilityDataService) {}

  ngOnInit(): void {
    // this.updateScoresChart();
    // this.loadData();
    this.getFilteredCve();

    this.subscriptions.add(
      this.localStorageService.startDate$.subscribe(() => {
        this.getFilteredCve();
      })
    );
  }

  // private loadData() {
  //   const ranges = [
  //     [0, 1],
  //     [1, 2],
  //     [2, 3],
  //     [3, 4],
  //     [4, 5],
  //     [5, 6],
  //     [6, 7],
  //     [7, 8],
  //     [8, 9],
  //     [9, ''],
  //   ];

  //   const promises = ranges.map(([fc, tc]) => this.getFilteredCve(fc, tc));
  //   Promise.all(promises).then(() => {
  //     this.updateScoresChart();
  //   });
  // }

  // private getFilteredCve(): Promise<void> {
  //   return new Promise((resolve) => {
  //     const fromDate = localStorage.getItem('startDate');
  //     const toDate = localStorage.getItem('endDate');
  //     const payload = {
  //       fromDate: fromDate ? moment(fromDate).format('YYYY-MM-DD') : '',
  //       toDate: toDate ? moment(toDate).format('YYYY-MM-DD') : '',
  //     };

  //     this.vulnerabilitiesService.getFilteredCves(payload).subscribe((res) => {
  //       // this.responseLengths[fc] = res.length || 0; // Default to 0 if response is empty
  //       // resolve();
  //       console.log("getFilteredCve",res)
  //     });
  //   });
  // }

  private getFilteredCve(): Promise<void> {
    return new Promise((resolve) => {
      const fromDate = localStorage.getItem('startDate');
      const toDate = localStorage.getItem('endDate');
      const payload = {
        fromDate: fromDate ? moment(fromDate).format('YYYY-MM-DD') : '',
        toDate: toDate ? moment(toDate).format('YYYY-MM-DD') : '',
      };
  
      this.vulnerabilitiesService.getFilteredCves(payload).subscribe((res: Record<string, Array<{ id: number; cvssScore: number }>>) => {
        const result = Object.entries(res).map(([range, items]) => ({
          range,
          count: items.length,
        }));
  
        this.updateScoresChart(result)
  
        resolve(); // If needed
      });
    });
  }
  
  
  private updateScoresChart(asset:any) {
     const vendors = asset.map((item: any) => item.range);
     const counts = asset.map((item: any) => item.count);
    this.scoreChart = {
      series: [
        {
          data: counts,
        },
      ],
      chart: {
        type: 'bar',
        fontFamily: 'inherit',
        foreColor: '#a1aab2',
        toolbar: {
          show: false,
        },
        height: 250,
        resize: true,
      },
      colors: [
        '#0eb81483',
        '#E8F7FF',
        '#0eb81483',
        '#abbd09f7',
        '#e3f91af7',
        '#f9ea1af7',
        '#f9c51af7',
        '#f9c51af7',
        '#f9951af7',
        '#eb3e0ef7',
      ],
      plotOptions: {
        bar: {
          borderRadius: 2,
          horizontal: true,
          distributed: true,
          barHeight: '40%',
          dataLabels: {
            position: 'right',
          },
        },
      },
      dataLabels: {
        enabled: true,
        formatter: function (val: any) {
          return val;
        },
        style: {
          colors: ['#fff'],
        },
        offsetX: 300,
        textAnchor: 'start',
      },
      xaxis: {
        categories: [
          '0-1',
          '1-2',
          '2-3',
          '3-4',
          '4-5',
          '5-6',
          '6-7',
          '7-8',
          '8-9',
          '9+',
        ],
        axisBorder: {
          show: false,
        },
        axisTicks: {
          show: false,
        },
        labels: {
          show: false,
        },
      },
      yaxis: {
        labels: {
          show: true,
        },
      },
      grid: {
        show: false,
      },
      stroke: {
        show: true,
        width: 2.5,
        colors: ['rgba(0,0,0,0.01)'],
      },
      fill: {
        opacity: 1,
      },
      tooltip: {
        enabled: false,
      },
      legend: {
        show: false,
      },
    };
  }
}

